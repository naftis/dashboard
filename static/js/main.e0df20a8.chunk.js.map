{"version":3,"sources":["services/weather.ts","services/forecast.ts","services/time.ts","components/BusStop.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_BASE_URL","defaultOptions","appid","lang","units","query","apiEndpoint","params","a","url","payload","queryString","fetch","response","json","weather","cityName","q","result","weatherIcons","doubleDigit","num","toString","padStart","formatTime","timeOfDay","options","hours","minutes","showSeconds","seconds","replace","BUS_SCHEDULES","gql","BusStop","useState","time","setTime","icon","setIcon","temperature","setTemperature","selectedStop","setSelectedStop","bind","useDoubleTap","getWeather","then","x","temp","main","toFixed","useEffect","interval","setInterval","clearInterval","handleTime","localTime","Date","toLocaleTimeString","hour12","timeout","useQuery","variables","stopIds","numberOfDepartures","pollInterval","data","loading","error","stop","stops","stoptimes","stoptimesWithoutPatterns","className","Number","name","map","stoptime","i","trip","route","shortName","daySeconds","scheduledArrival","Math","floor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0df20a8.chunk.js","sourcesContent":["import { IForecast, IWeather } from \"./types\";\nimport * as queryString from \"query-string\";\n\nconst API_BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\n\nconst defaultOptions = {\n  appid: \"2b0ad50b08d453642b2296fd8d877fee\",\n  lang: \"fi\",\n  units: \"metric\",\n};\n\nasync function query(\n  apiEndpoint: string,\n  params: object\n): Promise<IForecast | IWeather> {\n  const url = API_BASE_URL + apiEndpoint;\n  const payload = queryString.stringify({\n    ...params,\n    ...defaultOptions,\n  });\n\n  const response = await fetch(`${url}?${payload}`);\n  const json = await response.json();\n\n  return json;\n}\n\nexport const weather = {\n  async getByCityName(cityName: string): Promise<IWeather> {\n    const result = await query(\"weather\", { q: cityName });\n    return result as IWeather;\n  },\n\n  async getByCityId(cityId: string): Promise<IWeather> {\n    const result = await query(\"weather\", { id: cityId });\n    return result as IWeather;\n  },\n\n  async getByGeoCoords(\n    lat: number | string,\n    lon: number | string\n  ): Promise<IWeather> {\n    const result = await query(\"weather\", { lat, lon });\n    return result as IWeather;\n  },\n\n  async getByZipCode(zipCode: number | string): Promise<IWeather> {\n    const result = await query(\"weather\", { zip: zipCode });\n    return result as IWeather;\n  },\n};\n\nexport const forecast = {\n  async getByCityName(cityName: string): Promise<IForecast> {\n    const result = await query(\"forecast\", { q: cityName });\n    return result as IForecast;\n  },\n\n  async getByCityId(cityId: string): Promise<IForecast> {\n    const result = await query(\"forecast\", { id: cityId });\n    return result as IForecast;\n  },\n\n  async getByGeoCoords(\n    lat: number | string,\n    lon: number | string\n  ): Promise<IForecast> {\n    const result = await query(\"forecast\", { lat, lon });\n    return result as IForecast;\n  },\n\n  async getByZipCode(zipCode: number | string): Promise<IForecast> {\n    const result = await query(\"forecast\", { zip: zipCode });\n    return result as IForecast;\n  },\n};\n\nexport async function validateCity(cityName: string) {\n  try {\n    const resp = await weather.getByCityName(cityName);\n    return resp.cod === 200;\n  } catch {\n    return false;\n  }\n}\n","import dateFormat from \"dateformat\";\nimport { forecast } from \"./weather\";\n\nexport async function getForecastText(\n  cityName: string,\n  limit: number = 8\n): Promise<string | undefined> {\n  const data = await forecast.getByCityName(cityName);\n\n  if (!data.list) {\n    return;\n  }\n\n  const items = data.list.slice(0, limit + 1);\n  const forecastLines = items\n    .map((item) => {\n      const icon = (weatherIcons as any)[item.weather[0].icon] as string;\n      const time = dateFormat(new Date(item.dt * 1000), \"HH:MM\");\n      const temp = item.main.temp.toFixed(1);\n\n      return `\\`${icon.padEnd(3, \" \")} ${time.padEnd(8, \" \")} ${temp}°C\\``;\n    })\n    .join(\"\\n\");\n\n  if (!forecastLines) {\n    return \"error\";\n  }\n\n  return `*${data.city.name}*\\n${forecastLines}`;\n}\n\nexport const weatherIcons = {\n  \"01d\": \"☀️\",\n  \"01n\": \"☀️\",\n  \"02d\": \"⛅️\",\n  \"02n\": \"⛅️\",\n  \"03d\": \"☁️\",\n  \"03n\": \"☁️\",\n  \"04d\": \"☁️\",\n  \"04n\": \"☁️\",\n  \"09d\": \"🌧\",\n  \"09n\": \"🌧\",\n  \"10d\": \"🌦\",\n  \"10n\": \"🌦\",\n  \"11d\": \"⛈\",\n  \"11n\": \"⛈\",\n  \"13d\": \"🌨\",\n  \"13n\": \"🌨\",\n  \"50d\": \"🌫\",\n  \"50n\": \"🌫\",\n};\n","export type DaySeconds = number;\nexport type Hours = number;\nexport type Minutes = number;\nexport type Seconds = number;\nexport type Milliseconds = number;\nexport type EpochMilliseconds = Milliseconds;\nexport type EpochSecondsLocal = Milliseconds;\n\nexport interface ITimeOfDay {\n  hours: Hours;\n  minutes: Minutes;\n  seconds: Seconds;\n}\n\nexport const parseDaySeconds = (daySeconds: DaySeconds): ITimeOfDay => ({\n  hours: Math.floor(daySeconds / (60 * 60)),\n  minutes: Math.floor(daySeconds / 60) % 60,\n  seconds: daySeconds % 60,\n});\n\nconst doubleDigit = (num: string | number) => num.toString().padStart(2, \"0\");\n\nexport interface IformatTimeOptions {\n  showSeconds?: boolean;\n}\n\nexport const formatTime = (\n  timeOfDay: ITimeOfDay,\n  options: IformatTimeOptions = {}\n): string =>\n  `${doubleDigit(timeOfDay.hours)}:${doubleDigit(timeOfDay.minutes)}${\n    options.showSeconds ? `:${doubleDigit(timeOfDay.seconds)}` : \"\"\n  }`\n    .replace(\"25\", \"01\")\n    .replace(\"24\", \"00\");\n","import { gql, useQuery } from \"@apollo/client\";\nimport { useEffect, useState } from \"react\";\nimport { weatherIcons } from \"../services/forecast\";\nimport { formatTime, parseDaySeconds } from \"../services/time\";\nimport { weather } from \"../services/weather\";\nimport { useDoubleTap } from \"use-double-tap\";\nimport \"./BusStop.css\";\n\nconst BUS_SCHEDULES = gql`\n  query GetStops($stopIds: [String], $numberOfDepartures: Int!) {\n    stops(ids: $stopIds) {\n      name\n      gtfsId\n      stoptimesWithoutPatterns(numberOfDepartures: $numberOfDepartures) {\n        stop {\n          id\n          gtfsId\n          platformCode\n          __typename\n        }\n        scheduledArrival\n        realtimeArrival\n        arrivalDelay\n        scheduledDeparture\n        realtimeDeparture\n        departureDelay\n        usedTime: realtimeDeparture\n        timepoint\n        realtime\n        realtimeState\n        pickupType\n        dropoffType\n        serviceDay\n        headsign\n        trip {\n          route {\n            shortName\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n`;\n\nexport const BusStop = () => {\n  const [time, setTime] = useState(\"\");\n  const [icon, setIcon] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"\");\n  const [selectedStop, setSelectedStop] = useState(0);\n\n  const bind = useDoubleTap(() => {\n    setSelectedStop(selectedStop === 0 ? 1 : 0);\n  });\n\n  function getWeather() {\n    weather.getByCityName(\"Tampere\").then((x) => {\n      const temp = x.main.temp.toFixed(1);\n      setTemperature(temp);\n      setIcon((weatherIcons as any)[x.weather[0].icon]);\n    });\n  }\n\n  useEffect(() => {\n    getWeather();\n    const interval = setInterval(getWeather, 1000 * 60 * 10);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleTime = () => {\n    const date = new Date();\n    const localTime = date.toLocaleTimeString(\"en-US\", { hour12: false });\n\n    setTime(localTime);\n  };\n\n  useEffect(() => {\n    const timeout = setInterval(handleTime, 500);\n    return () => clearInterval(timeout);\n  }, []);\n\n  const { loading, error, data } = useQuery(BUS_SCHEDULES, {\n    variables: {\n      stopIds: [\"tampere:4507\", \"tampere:4511\"],\n      numberOfDepartures: 10,\n    },\n    pollInterval: 60 * 1000,\n  });\n\n  const stop = data?.stops[selectedStop];\n  const stoptimes = stop.stoptimesWithoutPatterns;\n\n  return (\n    <>\n      <header className=\"header\">\n        <div className=\"weather\">\n          <div className=\"icon\">{icon}</div>\n          <div\n            className={`temperature ${\n              Number(temperature) > 0 ? \"positive\" : \"negative\"\n            }`}\n          >\n            {temperature}°C\n          </div>\n        </div>\n        <div className=\"stop\" {...bind}>\n          {stop.name}\n        </div>\n        <div className=\"time\">{time}</div>\n      </header>\n      <table className=\"bus\">\n        <thead>\n          <tr>\n            <th>Linja</th>\n            <th>Lähtöaika</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stoptimes?.map((stoptime: any, i: number) => (\n            <tr key={i}>\n              <td>{stoptime.trip.route.shortName}</td>\n              <td>{formatTime(parseDaySeconds(stoptime.scheduledArrival))}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { BusStop } from \"./components/BusStop\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BusStop />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.digitransit.fi/routing/v1/routers/waltti/index/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}