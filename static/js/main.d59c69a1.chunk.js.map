{"version":3,"sources":["services/weather.ts","services/forecast.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_BASE_URL","defaultOptions","appid","lang","units","query","apiEndpoint","params","a","url","payload","queryString","fetch","response","json","weather","cityName","q","result","weatherIcons","App","useState","icon","setIcon","temperature","setTemperature","iframe","useRef","getWeather","then","x","temp","main","toFixed","getSchedules","current","src","useEffect","interval","setInterval","clearInterval","className","title","style","border","width","height","ref","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAGMA,EAAe,2CAEfC,EAAiB,CACrBC,MAAO,mCACPC,KAAM,KACNC,MAAO,U,SAGMC,E,gFAAf,WACEC,EACAC,GAFF,qBAAAC,EAAA,6DAIQC,EAAMT,EAAeM,EACrBI,EAAUC,YAAA,2BACXJ,GACAN,IAPP,SAUyBW,MAAM,GAAD,OAAIH,EAAJ,YAAWC,IAVzC,cAUQG,EAVR,gBAWqBA,EAASC,OAX9B,cAWQA,EAXR,yBAaSA,GAbT,4C,sBAgBO,IAAMC,EAAU,SACDC,GAAsC,OAAD,0HAClCX,EAAM,UAAW,CAAEY,EAAGD,IADY,cACjDE,EADiD,yBAEhDA,GAFgD,8CCGpD,IAAMC,EAAe,CAC1B,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,SACP,MAAO,SACP,MAAO,eACP,MAAO,eACP,MAAO,eACP,MAAO,gBCIMC,MAhDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,KAGPC,EAASC,iBAA0B,MAEzC,SAASC,IACPb,EAAsB,WAAWc,MAAK,SAACC,GACrC,IAAMC,EAAOD,EAAEE,KAAKD,KAAKE,QAAQ,GACjCR,EAAeM,GACfR,EAASJ,EAAqBW,EAAEf,QAAQ,GAAGO,UATlC,SAaEY,IAbF,2EAab,sBAAA1B,EAAA,sDACMkB,EAAOS,UAETT,EAAOS,QAAQC,IAAMV,EAAOS,QAAQC,KAHxC,4CAba,sBAgCb,OAZAC,qBAAU,WACRT,IACA,IAAMU,EAAWC,YAAYX,EAAY,KACzC,OAAO,kBAAMY,cAAcF,MAC1B,IAEHD,qBAAU,WACRH,IACA,IAAMI,EAAWC,YAAYL,EAAc,KAC3C,OAAO,kBAAMM,cAAcF,MAC1B,IAGD,sBAAKG,UAAU,MAAf,UACE,wBACEC,MAAM,QACNN,IAAI,uDACJO,MAAO,CAAEC,OAAQ,EAAGC,MAAO,OAAQC,OAAQ,QAC3CC,IAAKrB,IAEP,sBAAKsB,GAAG,UAAR,UACE,gCAAMxB,EAAN,WACA,qBAAKwB,GAAG,OAAR,SAAgB1B,WCjCT2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d59c69a1.chunk.js","sourcesContent":["import { IForecast, IWeather } from \"./types\";\nimport * as queryString from \"query-string\";\n\nconst API_BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\n\nconst defaultOptions = {\n  appid: \"2b0ad50b08d453642b2296fd8d877fee\",\n  lang: \"fi\",\n  units: \"metric\",\n};\n\nasync function query(\n  apiEndpoint: string,\n  params: object\n): Promise<IForecast | IWeather> {\n  const url = API_BASE_URL + apiEndpoint;\n  const payload = queryString.stringify({\n    ...params,\n    ...defaultOptions,\n  });\n\n  const response = await fetch(`${url}?${payload}`);\n  const json = await response.json();\n\n  return json;\n}\n\nexport const weather = {\n  async getByCityName(cityName: string): Promise<IWeather> {\n    const result = await query(\"weather\", { q: cityName });\n    return result as IWeather;\n  },\n\n  async getByCityId(cityId: string): Promise<IWeather> {\n    const result = await query(\"weather\", { id: cityId });\n    return result as IWeather;\n  },\n\n  async getByGeoCoords(\n    lat: number | string,\n    lon: number | string\n  ): Promise<IWeather> {\n    const result = await query(\"weather\", { lat, lon });\n    return result as IWeather;\n  },\n\n  async getByZipCode(zipCode: number | string): Promise<IWeather> {\n    const result = await query(\"weather\", { zip: zipCode });\n    return result as IWeather;\n  },\n};\n\nexport const forecast = {\n  async getByCityName(cityName: string): Promise<IForecast> {\n    const result = await query(\"forecast\", { q: cityName });\n    return result as IForecast;\n  },\n\n  async getByCityId(cityId: string): Promise<IForecast> {\n    const result = await query(\"forecast\", { id: cityId });\n    return result as IForecast;\n  },\n\n  async getByGeoCoords(\n    lat: number | string,\n    lon: number | string\n  ): Promise<IForecast> {\n    const result = await query(\"forecast\", { lat, lon });\n    return result as IForecast;\n  },\n\n  async getByZipCode(zipCode: number | string): Promise<IForecast> {\n    const result = await query(\"forecast\", { zip: zipCode });\n    return result as IForecast;\n  },\n};\n\nexport async function validateCity(cityName: string) {\n  try {\n    const resp = await weather.getByCityName(cityName);\n    return resp.cod === 200;\n  } catch {\n    return false;\n  }\n}\n","import dateFormat from \"dateformat\";\nimport { forecast } from \"./weather\";\n\nexport async function getForecastText(\n  cityName: string,\n  limit: number = 8\n): Promise<string | undefined> {\n  const data = await forecast.getByCityName(cityName);\n\n  if (!data.list) {\n    return;\n  }\n\n  const items = data.list.slice(0, limit + 1);\n  const forecastLines = items\n    .map((item) => {\n      const icon = (weatherIcons as any)[item.weather[0].icon] as string;\n      const time = dateFormat(new Date(item.dt * 1000), \"HH:MM\");\n      const temp = item.main.temp.toFixed(1);\n\n      return `\\`${icon.padEnd(3, \" \")} ${time.padEnd(8, \" \")} ${temp}¬∞C\\``;\n    })\n    .join(\"\\n\");\n\n  if (!forecastLines) {\n    return \"error\";\n  }\n\n  return `*${data.city.name}*\\n${forecastLines}`;\n}\n\nexport const weatherIcons = {\n  \"01d\": \"‚òÄÔ∏è\",\n  \"01n\": \"‚òÄÔ∏è\",\n  \"02d\": \"‚õÖÔ∏è\",\n  \"02n\": \"‚õÖÔ∏è\",\n  \"03d\": \"‚òÅÔ∏è\",\n  \"03n\": \"‚òÅÔ∏è\",\n  \"04d\": \"‚òÅÔ∏è\",\n  \"04n\": \"‚òÅÔ∏è\",\n  \"09d\": \"üåß\",\n  \"09n\": \"üåß\",\n  \"10d\": \"üå¶\",\n  \"10n\": \"üå¶\",\n  \"11d\": \"‚õà\",\n  \"11n\": \"‚õà\",\n  \"13d\": \"üå®\",\n  \"13n\": \"üå®\",\n  \"50d\": \"üå´\",\n  \"50n\": \"üå´\",\n};\n","import { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { weatherIcons } from \"./services/forecast\";\nimport { weather } from \"./services/weather\";\n\nfunction App() {\n  const [icon, setIcon] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"\");\n  const iframe = useRef<HTMLIFrameElement>(null);\n\n  function getWeather() {\n    weather.getByCityName(\"Tampere\").then((x) => {\n      const temp = x.main.temp.toFixed(1);\n      setTemperature(temp);\n      setIcon((weatherIcons as any)[x.weather[0].icon]);\n    });\n  }\n\n  async function getSchedules() {\n    if (iframe.current) {\n      // eslint-disable-next-line no-self-assign\n      iframe.current.src = iframe.current.src;\n    }\n  }\n\n  useEffect(() => {\n    getWeather();\n    const interval = setInterval(getWeather, 1000 * 60 * 10);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    getSchedules();\n    const interval = setInterval(getSchedules, 1000 * 60 * 5);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <iframe\n        title=\"Nysse\"\n        src=\"https://tremonitori.digitransit.fi/stop/tampere:4507\"\n        style={{ border: 0, width: \"100%\", height: \"100%\" }}\n        ref={iframe}\n      ></iframe>\n      <div id=\"weather\">\n        <div>{temperature}¬∞C</div>\n        <div id=\"icon\">{icon}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}