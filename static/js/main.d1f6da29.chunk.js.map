{"version":3,"sources":["services/weather.ts","services/forecast.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_BASE_URL","defaultOptions","appid","lang","units","query","_callee9","apiEndpoint","params","url","payload","response","json","regenerator_default","a","wrap","_context9","prev","next","queryString","Object","objectSpread","fetch","concat","sent","abrupt","stop","weather","getByCityName","_getByCityName","asyncToGenerator","mark","_callee","cityName","result","_context","q","_x3","apply","this","arguments","getByCityId","_getByCityId","_callee2","cityId","_context2","id","_x4","getByGeoCoords","_getByGeoCoords","_callee3","lat","lon","_context3","_x5","_x6","getByZipCode","_getByZipCode","_callee4","zipCode","_context4","zip","_x7","_getByCityName2","_callee5","_context5","_getByCityId2","_callee6","_context6","_getByGeoCoords2","_callee7","_context7","_getByZipCode2","_callee8","_context8","weatherIcons","01d","01n","02d","02n","03d","03n","04d","04n","09d","09n","10d","10n","11d","11n","13d","13n","50d","50n","App","_useState","useState","_useState2","slicedToArray","time","setTime","_useState3","_useState4","icon","setIcon","_useState5","_useState6","temperature","setTemperature","getTime","currentTime","exec","Date","toTimeString","getWeather","then","x","temp","main","toFixed","useEffect","interval","setInterval","clearInterval","react_default","createElement","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1f6da29.chunk.js","sourcesContent":["import { IForecast, IWeather } from \"./types\";\r\nimport * as queryString from \"query-string\";\r\n\r\nconst API_BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\r\n\r\nconst defaultOptions = {\r\n  appid: \"2b0ad50b08d453642b2296fd8d877fee\",\r\n  lang: \"fi\",\r\n  units: \"metric\"\r\n};\r\n\r\nasync function query(\r\n  apiEndpoint: string,\r\n  params: object\r\n): Promise<IForecast | IWeather> {\r\n  const url = API_BASE_URL + apiEndpoint;\r\n  const payload = queryString.stringify({\r\n    ...params,\r\n    ...defaultOptions\r\n  });\r\n\r\n  const response = await fetch(`${url}?${payload}`);\r\n  const json = await response.json();\r\n\r\n  return json;\r\n}\r\n\r\nexport const weather = {\r\n  async getByCityName(cityName: string): Promise<IWeather> {\r\n    const result = await query(\"weather\", { q: cityName });\r\n    return result as IWeather;\r\n  },\r\n\r\n  async getByCityId(cityId: string): Promise<IWeather> {\r\n    const result = await query(\"weather\", { id: cityId });\r\n    return result as IWeather;\r\n  },\r\n\r\n  async getByGeoCoords(\r\n    lat: number | string,\r\n    lon: number | string\r\n  ): Promise<IWeather> {\r\n    const result = await query(\"weather\", { lat, lon });\r\n    return result as IWeather;\r\n  },\r\n\r\n  async getByZipCode(zipCode: number | string): Promise<IWeather> {\r\n    const result = await query(\"weather\", { zip: zipCode });\r\n    return result as IWeather;\r\n  }\r\n};\r\n\r\nexport const forecast = {\r\n  async getByCityName(cityName: string): Promise<IForecast> {\r\n    const result = await query(\"forecast\", { q: cityName });\r\n    return result as IForecast;\r\n  },\r\n\r\n  async getByCityId(cityId: string): Promise<IForecast> {\r\n    const result = await query(\"forecast\", { id: cityId });\r\n    return result as IForecast;\r\n  },\r\n\r\n  async getByGeoCoords(\r\n    lat: number | string,\r\n    lon: number | string\r\n  ): Promise<IForecast> {\r\n    const result = await query(\"forecast\", { lat, lon });\r\n    return result as IForecast;\r\n  },\r\n\r\n  async getByZipCode(zipCode: number | string): Promise<IForecast> {\r\n    const result = await query(\"forecast\", { zip: zipCode });\r\n    return result as IForecast;\r\n  }\r\n};\r\n\r\nexport async function validateCity(cityName: string) {\r\n  try {\r\n    const resp = await weather.getByCityName(cityName);\r\n    return resp.cod === 200;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n","import dateFormat from \"dateformat\";\r\nimport { forecast } from \"./weather\";\r\n\r\nexport async function getForecastText(\r\n  cityName: string,\r\n  limit: number = 8\r\n): Promise<string | undefined> {\r\n  const data = await forecast.getByCityName(cityName);\r\n\r\n  if (!data.list) {\r\n    return;\r\n  }\r\n\r\n  const items = data.list.slice(0, limit + 1);\r\n  const forecastLines = items\r\n    .map(item => {\r\n      const icon = (weatherIcons as any)[item.weather[0].icon] as string;\r\n      const time = dateFormat(new Date(item.dt * 1000), \"HH:MM\");\r\n      const temp = item.main.temp.toFixed(1);\r\n\r\n      return `\\`${icon.padEnd(3, \" \")} ${time.padEnd(8, \" \")} ${temp}°C\\``;\r\n    })\r\n    .join(\"\\n\");\r\n\r\n  if (!forecastLines) {\r\n    return \"error\";\r\n  }\r\n\r\n  return `*${data.city.name}*\\n${forecastLines}`;\r\n}\r\n\r\nexport const weatherIcons = {\r\n  \"01d\": \"☀️\",\r\n  \"01n\": \"☀️\",\r\n  \"02d\": \"⛅️\",\r\n  \"02n\": \"⛅️\",\r\n  \"03d\": \"☁️\",\r\n  \"03n\": \"☁️\",\r\n  \"04d\": \"☁️\",\r\n  \"04n\": \"☁️\",\r\n  \"09d\": \"🌧\",\r\n  \"09n\": \"🌧\",\r\n  \"10d\": \"🌦\",\r\n  \"10n\": \"🌦\",\r\n  \"11d\": \"⛈\",\r\n  \"11n\": \"⛈\",\r\n  \"13d\": \"🌨\",\r\n  \"13n\": \"🌨\",\r\n  \"50d\": \"🌫\",\r\n  \"50n\": \"🌫\"\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as weather from \"./services/weather\";\nimport { weatherIcons } from \"./services/forecast\";\n\nconst App: React.FC = () => {\n  const [time, setTime] = useState(\"\");\n  const [icon, setIcon] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"\");\n\n  function getTime() {\n    const currentTime = `${/^\\d\\d?:\\d\\d/.exec(new Date().toTimeString())}`;\n    setTime(currentTime);\n  }\n\n  useEffect(() => {\n    getTime();\n    const interval = setInterval(getTime, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function getWeather() {\n    weather.weather.getByCityName(\"Tampere\").then(x => {\n      const temp = x.main.temp.toFixed(1);\n      setTemperature(temp);\n      setIcon((weatherIcons as any)[x.weather[0].icon]);\n    });\n  }\n\n  useEffect(() => {\n    getWeather();\n    const interval = setInterval(getWeather, 1000 * 60 * 10);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div id=\"time\">{time}</div>\n      <div id=\"weather\">\n        {icon} {temperature}°C\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}